#include <WiFi.h>
#include <WebServer.h>  // Simple web server library

// Replace with your WiFi credentials
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

WebServer server(80);   // Web server on port 80
int ledPin = 2;         // Onboard LED (GPIO2)

// Serve HTML page (you could also load from SPIFFS)
const char webpage[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <title>ESP32 LED Control</title>
  <style>
    body { text-align: center; font-family: Arial; background: #f2f2f2; }
    h1 { color: #333; }
    button {
      padding: 15px 30px;
      margin: 10px;
      font-size: 18px;
      border-radius: 10px;
      border: none;
      cursor: pointer;
    }
    .on { background: green; color: white; }
    .off { background: red; color: white; }
  </style>
</head>
<body>
  <h1>ESP32 LED Control</h1>
  <button class="on" onclick="fetch('/LED=ON')">Turn ON</button>
  <button class="off" onclick="fetch('/LED=OFF')">Turn OFF</button>
</body>
</html>
)rawliteral";

void setup() {
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);

  // Connect to WiFi
  Serial.print("Connecting to WiFi: ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nWiFi Connected!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Define server routes
  server.on("/", []() {
    server.send(200, "text/html", webpage);
  });

  server.on("/LED=ON", []() {
    digitalWrite(ledPin, HIGH);
    server.send(200, "text/plain", "LED is ON");
  });

  server.on("/LED=OFF", []() {
    digitalWrite(ledPin, LOW);
    server.send(200, "text/plain", "LED is OFF");
  });

  server.begin();
}

void loop() {
  server.handleClient();
}
